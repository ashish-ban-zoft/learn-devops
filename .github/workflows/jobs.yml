name: Deploy to env

on:
  pull_request:
    types:
      - closed
    branches:
      - "master"
      - "production"
      - "staging"
      - "dev"

jobs:
  if_merged:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' 
    name: Promote
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        shell: bash
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v2

      - name: Promote
        env:
          JOB_ENV: ${{ job.environment }}
          SLUG: ${{ github.ref_name }}
          VAR: ${{ toJSON(vars) }}

        run: |
          echo Running on $(basename ${GITHUB_REF}) branch
          echo "$JOB_ENV"
          echo "$SLUG"
          echo "$VAR"
    

  logcontext:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          
        run: echo "$GITHUB_CONTEXT"

  changedfiles:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs: 
      all: ${{ steps.changes.outputs.all }}
      ts: ${{ steps.changes.outputs.ts }}
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get Changed files
        id: changes
        # Set outputs using the command
        run: |
          echo "::set-output name=all::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs )"
          echo "::set-output name=ts::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep .ts$ | xargs )"
          echo "Changed files are :"
          echo "$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs )"
        
  lint:
      runs-on: ubuntu-latest
      # require the first job to have ran
      needs: changedfiles
      steps:
        - name: echo all changed files
          run: | 
            echo "All changed files"
            echo ${{needs.changedfiles.outputs.all}}
            echo "TS changed files"
            echo ${{needs.changedfiles.outputs.ts}}
            list_of_changed_files=$(echo "${{needs.changedfiles.outputs.all}}")

            # list of changed files string is split to array, so we can match for the folder name and filter out the 
            # rpm-root-config directory.
            split_names=($list_of_changed_files) 

            # filtered paths
            filtered_paths=() 

            # variable to store the list of filtered paths as a single
            # string to pass as upload paths to az cli function 
            file_names="" 

            # Loop on split names and check if name matches the required directory name pattern.
            for i in "${split_names[@]}"; do 
                if [[ $i =~ rpm-root-config/* ]]; then
                filtered_paths+=($i)
                fi
            done

            for i in "${filtered_paths[@]}"; do 
              file_names="${file_names} ${i}"
            done

            echo "$file_names"

            newstring=$(echo "${file_names//rpm-root-config/ }")
            echo "$newstring"
            newstring=$(echo "${newstring//// }")
            echo "az storage blob delete --account-name \$web -d $newstring"
